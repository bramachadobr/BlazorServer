@page "/counter"

@using BlazorServer.Data
@using BlazorServer.Service

@*@inherits OwningComponentBase<EMailService>*@
@inject EMailService EmailService


<EditForm Model="@email" OnValidSubmit="@InserirEmail">
    <MatTextField @bind-Value="@email.Nome" Label="Nome" Outlined="true"></MatTextField>

    <MatTextField @bind-Value="@email.EnderecoEmail" Label="Email" Outlined="true"></MatTextField>

    <MatButton Type="submit">Salvar</MatButton>
</EditForm>

<ComponetAlertMessege Message="@_messageAlert" Enumtipo="EnumTipoAlerts.info"></ComponetAlertMessege>

<MatTable Items="@sortedData" class="mat-elevation-z5" AllowSelection="true" ShowPaging="true" UseSortHeaderRow="true">
    <MatTableHeader>
        <MatSortHeaderRow SortChanged="@SortData">
            <MatSortHeader SortId="id">Id</MatSortHeader>
            <MatSortHeader SortId="nome">Name</MatSortHeader>
            <MatSortHeader SortId="email">Email</MatSortHeader>
        </MatSortHeaderRow>
    </MatTableHeader>
    <MatTableRow>
            <td>@context.Id</td>
            <td>@context.Nome</td>
            <td>@context.EnderecoEmail</td>
    </MatTableRow>
</MatTable>


@*@foreach (var item in EmailService.Email)
{
    <div class="row">
        <div class="col-sm">@item.Id</div>
        <div class="col-sm">@item.Nome</div>
        <div class="col-sm">@item.EnderecoEmail</div>
    </div>
}*@


@code
 {

    public Email email = new Email();

    public string _messageAlert { get; set; } = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EmailService.LoadEmail();
        SortData(null);

    }

    void InserirEmail()
    {
        if (EmailService.InserRecord(email))
        {
            _messageAlert = "Sucesso";
            email = new Email();
        }
        else
            _messageAlert = "Erro";
    }

    void SortData(MatSortChangedEvent sort)
    {
        sortedData = EmailService.Email;
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<Email> comparison = null;
            switch (sort.SortId)
            {
                case "id":
                    comparison = (s1, s2) => s1.Id.CompareTo(s2.Id);
                    break;
                case "nome":
                    comparison = (s1, s2) => string.Compare(s1.Nome, s2.Nome, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "email":
                    comparison = (s1, s2) => s1.EnderecoEmail.CompareTo(s2.EnderecoEmail);
                    break;
            }
            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData.ToArray(), (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    sortedData.OrderBy(o => o.Nome).ToList();

                    Array.Sort(sortedData.ToArray(), comparison);
                }
            }
        }
    }
    List<Email> sortedData = null;
}