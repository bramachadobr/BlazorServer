@page "/unidades"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@inject MudBlazor.DialogService DialogService
@implements IDisposable
@inherits OwningComponentBase<UnidadeService>


<div class="container">
    <br />
    <div class="row">
        <RadzenDataGrid IsLoading="@isLoading" Count="@count" Data="@_Unidades" TItem="Data.Unidade" LoadData="@LoadData" RowDoubleClick="@(args=> OpenUnidades(args))"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true">
            <Columns>
                @*<RadzenDataGridColumn TItem="Colaborador" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />*@
                <RadzenDataGridColumn TItem="Data.Unidade" Property="Nome" Title="Nome." Frozen="false" Width="200px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="RazaoSocial" Title="Razao" Width="200px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="CNPJ" Title="CNPJ" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="Endereco" Title="Endereço" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="Numero" Title="Numero" Width="15px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="Bairro" Title="Bairro" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Unidade" Property="Cidade" Title="Cidade" Width="80px" />
            </Columns>
        </RadzenDataGrid>
    </div>
</div>


@code {

    RadzenDataGrid<Data.Unidade> grid;

    IEnumerable<Data.Unidade> _Unidades;

    bool isLoading;

    int count;

    public Data.Unidade UnidadeObj;

    protected override void OnInitialized()
    {
        _Unidades = Service.GetUnidadesList();
        LoadData(null);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var query = Service.GetUnidadesList().AsQueryable();

        _Unidades = query;

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Unidades = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Unidades = query;
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        count = _Unidades.Count();
        isLoading = false;
    }


    void OpenUnidades(DataGridRowMouseEventArgs<Data.Unidade> args)
    {
    }

    async void ResetGrid()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
        _Unidades = Service.GetUnidadesList().AsQueryable();
    }


    public void Dispose()
    {
    }

}
