@page "/colaboradores"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations

@*@inject  MudBlazor.DialogService DialogService*@
@implements IDisposable
@inherits OwningComponentBase<Service.ColaboradorService>
@inject IDialogService DialogService


<h3>Colaborador Component</h3>

<div>
    <div class="row">
        <RadzenButton Text="Reset" Click="ResetGrid" Style="margin-bottom:20px"></RadzenButton>
    </div>

    @*Data="@(_Colaboradores.Select(i=> new {CodPonto = i.CodPonto, Nome=i.Nome, Cpf=i.Cpf, Cargo=i.Cargo.NomeCargo, Contratacao = i.Contratacao, Salario=i.Salario, HoraAula = i.HoraAula}).Distinct().AsQueryable())"*@

    <div class="row">
           <RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@count" TItem="Data.Colaborador"  RowDoubleClick="@(args=> OpenColaborador(args))"  
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" Data="@_Colaboradores">
           <Columns>
                @*<RadzenDataGridColumn TItem="Colaborador" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />*@
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="CodPonto" Title="Cod." Frozen="true" Width="40px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Nome" Title="Nome Completo" Width="200px"/>
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cpf" Title="CPF" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cargo.NomeCargo" Title="Cargo" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Contratacao" Title="Data adminissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Demissao" Title="Data demissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Salario" Title="Salario" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="HoraAula" Title="Hora Aula" Width="80px" />
                
                @*<RadzenDataGridColumn TItem="Data.Colaborador" Title="Editar" Sortable="false" Filterable="false" Width="80px" > ColumnWidth="200px" PageSize="4" AllowPaging="true"ca
                    <Template Context="_Colaboradores">
                        <RadzenButton Text="Show busy dialog" Click=@(args => OpenColaborador(args)) />
                    </Template>
                </RadzenDataGridColumn>*@
           </Columns>
           </RadzenDataGrid>
    </div>
</div>

@* <RadzenButton Text="Show confirm dialog" Click=@(args => Radzen.DialogService .DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />*@



@code {
    RadzenDataGrid<Data.Colaborador> grid;

    IEnumerable<Data.Colaborador> _Colaboradores;

    bool isLoading;

    int count;

    //public Service.ColaboradorService _coladoradorService;

    public Data.Colaborador ColaboradorObj;

    MudBlazor.DialogService dialogService;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        //Task.Run(() => LoadData(ultimoFiltro));
        await LoadData(ultimoFiltro);
    }


    async void ResetGrid()
    {
        grid.Reset(true);
        await grid.Reload();
        await LoadData(ultimoFiltro);   
    }

    async Task EditarItem()
    {
    }

    Radzen.LoadDataArgs ultimoFiltro;

    async Task LoadData(Radzen.LoadDataArgs args)
    {
        ultimoFiltro = args;
        isLoading = true;

        
        //var query =  Service.Colaboradores.AsQueryable();
        var query =  Service.GetAllColaboradoresList().AsQueryable();

        _Colaboradores = query.ToList();


        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Colaboradores = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Colaboradores = query.ToList();
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        else
        {
            _Colaboradores = query.ToList();
        }

        count = _Colaboradores.Count();
        isLoading = false;
    }

    Guid colaboradorId;

    void Open(string title, Type type, Dictionary<string, object> parameters, MudBlazor.DialogOptions options)
    {   
    }

    void Close(dynamic result)
    {   
    }

    RadzenButton buttonFecharDialog;

    //public async Task OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    //{
    //    colaboradorId = item.Data.Id;
    //    await DialogService.OpenAsync<Colaborador>($"Data.Colaborador {colaboradorId}",
    //               new Dictionary<string, object>() { { "ColaboradorID", colaboradorId }, { "ButtonFecha", buttonFecharDialog} },
    //        new DialogOptions() { Width = "800px", Height = "600px", Style = "Resizable: true ;  Draggable : true ", ShowClose = true, ShowTitle = true, 
    //        });
    //}

    public async void OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    {
        Data.Colaborador colab = (Data.Colaborador)item.Data;
        var dialog = DialogService.Show<Colaborador>("Cadastro do Colaborador", new MudBlazor.DialogParameters () 
            { ["ColaboradorID"]=colab.Id, 
              ["colaborador"]=colab });
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ResetGrid();
        }

        //InvokeAsync(async () =>
        //{
        //    var dialog = DialogService.Show<Colaborador>();
        //    var result = dialog.Result;
        //});

    }

    //public async void OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    //{

    //    var dialog = DialogService.Show<Colaborador>("", new DialogParameters(){["ColaboradorID"]=colaboradorId});
    //    var result = await dialog.Result;

    //    //InvokeAsync(async () =>
    //    //{
    //    //    colaboradorId = item.Data.Id;
    //    //    await DialogService.OpenAsync<Colaborador>($"Data.Colaborador {colaboradorId}",
    //    //           new Dictionary<string, object>() { { "ColaboradorID", colaboradorId }, { "ButtonFecha", buttonFecharDialog} },
    //    //    new DialogOptions() { Width = "800px", Height = "600px", Style = "Resizable: true ;  Draggable : true ", ShowClose = true, ShowTitle = true, 
    //    //    });
    //    //});
    //}

    public void CloseDialog()
    {
        
    }

    //public async Task OpenColaborador(Guid id)
    //{
    //    colaboradorId = id;
    //    await DialogService.OpenAsync<Colaborador>($"Data.Colaborador {colaboradorId}",
    //           new Dictionary<string, object>() { { "ColaboradorID", colaboradorId } },
    //           new DialogOptions() { Width = "800px", Height = "550px", Style="Resizable: true " }); ;  /*Draggable : true */
    //}



    public void Dispose()
    {
        //DialogService.OnOpen -= Open;
        //DialogService.OnClose -= Close;
    }



}
