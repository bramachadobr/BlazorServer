@page "/colaboradores"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@inject DialogService DialogService
@implements IDisposable



<h3>Colaborador Component</h3>

<div>
    <div class="row">
        <RadzenButton Text="Reset" Click="ResetGrid" Style="margin-bottom:20px"></RadzenButton>
    </div>
    <div class="row">
           <RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@count" Data="@_Colaboradores" TItem="Data.Colaborador" LoadData="@LoadData" RowDoubleClick="@(args=> OpenColaborador(args))"
           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true"   >
           <Columns>
                @*<RadzenDataGridColumn TItem="Colaborador" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />*@
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="CodPonto" Title="Cod." Frozen="true" Width="40px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Nome" Title="Nome Completo" Width="200px"/>
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cpf" Title="CPF" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cargo.Nome" Title="Cargo" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Contratacao" Title="Data adminissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Demissao" Title="Data demissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Salario" Title="Salario" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="HoraAula" Title="Hora Aula" Width="80px" />
                
                @*<RadzenDataGridColumn TItem="Data.Colaborador" Title="Editar" Sortable="false" Filterable="false" Width="80px" > ColumnWidth="200px" PageSize="4" AllowPaging="true"
                    <Template Context="_Colaboradores">
                        <RadzenButton Text="Show busy dialog" Click=@(args => OpenColaborador(args)) />
                    </Template>
                </RadzenDataGridColumn>*@
           </Columns>
           </RadzenDataGrid>
    </div>
</div>

 <RadzenButton Text="Show confirm dialog" Click=@(args => DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />

@code {
    RadzenDataGrid<Data.Colaborador> grid;

    IEnumerable<Data.Colaborador> _Colaboradores;

    bool isLoading;

    int count;

    public Service.ColaboradorService _coladoradorService;

    public Data.Colaborador ColaboradorObj;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _coladoradorService = new ColaboradorService();
        _coladoradorService.LoadColaboradores();
        LoadData(null);
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        
    }

    void Close(dynamic result)
    {
        
    }

    

    async void ResetGrid()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
        _Colaboradores = _coladoradorService.Colaboradores.AsQueryable();
    }

    async Task EditarItem()
    {
    }


    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var query = _coladoradorService.Colaboradores.AsQueryable();

        _Colaboradores = query;

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Colaboradores = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Colaboradores = query;
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        count = _Colaboradores.Count();
        isLoading = false;
    }

    Guid colaboradorId;

    public async Task OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    {
        colaboradorId = item.Data.Id;
        await DialogService.OpenAsync<Colaborador>($"Data.Colaborador {colaboradorId}",
               new Dictionary<string, object>() { { "ColaboradorID", colaboradorId }, { "ColaboradorService",_coladoradorService} },  
        new DialogOptions() { Width = "800px", Height = "530px", Style="Resizable: true ;  Draggable : true " });
    }

    public async Task OpenColaborador(Guid id)
    {
        colaboradorId = id;
        await DialogService.OpenAsync<Colaborador>($"Data.Colaborador {colaboradorId}",
               new Dictionary<string, object>() { { "ColaboradorID", colaboradorId } },
               new DialogOptions() { Width = "800px", Height = "530px", Style="Resizable: true ;  Draggable : true " });
    }



    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }



}
