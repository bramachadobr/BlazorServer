@page "/Colaborador/colaborador"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable
@inherits OwningComponentBase
@inject IDialogService DialogService


<div class="container">
    <br />
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="Adicionar" OnClick="@NovoColaborador" />
    <br />
    <br />
    <div class="row">
    <RadzenFieldset Text="Cadastro de colaboradores">
           <RadzenDataGrid @ref="grid" IsLoading="@isLoading" Count="@count" TItem="Data.Colaborador"  RowDoubleClick="@(args=> OpenColaborador(args))"  AllowPaging="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" PageSize="25" 
                Data="@_Colaboradores"  AllowColumnResize="true" Style="border-radius: 6px;">
           <Columns>
                @*<RadzenDataGridColumn TItem="Colaborador" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />*@
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="CodPonto" Title="Cod." Frozen="true" Width="40px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Nome" Title="Nome Completo" Width="200px"/>
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cpf" Title="CPF" Width="100px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Cargo.NomeCargo" Title="Cargo" Width="110px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Contratacao" Title="Data adminissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Demissao" Title="Data demissão" FormatString="{0:dd/MM/yyyy}" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="Salario" Title="Salario" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Property="HoraAula" Title="Hora Aula" Width="80px" />
                <RadzenDataGridColumn TItem="Data.Colaborador" Title="Alteração" Width="120px">
                    <Template>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=> OpenColaborador(context.Id))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.ManageAccounts" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>OpenColaboradorManager(context.Id))" ></MudIconButton>
                    </Template>
                </RadzenDataGridColumn>
           </Columns>
           </RadzenDataGrid>
    </RadzenFieldset>
    </div>
</div>


@code 
{

    RadzenDataGrid<Data.Colaborador> grid;

    IEnumerable<Data.Colaborador> _Colaboradores;

    bool isLoading;

    int count;

    public Data.Colaborador ColaboradorObj;

    MudBlazor.DialogService dialogService;

    ColaboradorService _colaboradorService;
    CargoService _cargoService;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        _colaboradorService = (ColaboradorService)ScopedServices.GetService(typeof(ColaboradorService));
        _cargoService = (CargoService)ScopedServices.GetService(typeof(CargoService));

        await LoadData(ultimoFiltro);
    }

    async void ResetGrid()
    {
        grid.Reset(true);
        await grid.Reload();
        await LoadData(ultimoFiltro);   
    }

    async Task EditarItem()
    {
    }

    Radzen.LoadDataArgs ultimoFiltro;

    async Task LoadData(Radzen.LoadDataArgs args)
    {
        ultimoFiltro = args;
        isLoading = true;

        var query =  _colaboradorService.GetAllColaboradoresList().AsQueryable();

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Colaboradores = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Colaboradores = query.ToList();
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        else
        {
            _Colaboradores = query.ToList();
        }

        count = _Colaboradores.Count();
        isLoading = false;
    }

    Guid colaboradorId;

    void Open(string title, Type type, Dictionary<string, object> parameters, MudBlazor.DialogOptions options)
    {   
    }

    void Close(dynamic result)
    {   
    }

    void NovoColaborador()
    {
        OpenColaborador(Guid.Empty);
    }


    async void  OpenColaborador(Guid id)
    {
        MudBlazor.DialogOptions DialogOptions = new MudBlazor.DialogOptions()
        {
             //Position = DialogPosition.TopCenter, FullWidth = true
             //FullScreen = true, CloseButton = true, DisableBackdropClick = true, CloseButton = true
             MaxWidth = MaxWidth.Large,
             NoHeader = true
        };

        var dialog = DialogService.Show<Colaborador>("Cadastro do Colaborador", new MudBlazor.DialogParameters ()
            { ["ColaboradorID"]=id }, DialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            ResetGrid();
        }
    }

    async void OpenColaboradorManager(Guid id)
    {
        NavigationManager.NavigateTo($"/gerenciaColaborador/{id.ToString()}");
    }


    RadzenButton buttonFecharDialog;


    public async void OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    {
        MudBlazor.DialogOptions DialogOptions = new MudBlazor.DialogOptions()
        {
             //Position = DialogPosition.TopCenter, FullWidth = true
             //FullScreen = true, CloseButton = true, DisableBackdropClick = true, CloseButton = true
             MaxWidth = MaxWidth.Large,
             NoHeader = true
        };


        Data.Colaborador colab = (Data.Colaborador)item.Data;

        var dialog = DialogService.Show<Colaborador>("Cadastro do Colaborador", new MudBlazor.DialogParameters () 
            { ["ColaboradorID"]=colab.Id, 
              ["colaborador"]=colab }, DialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ResetGrid();
        }

    }

    public void CloseDialog()
    {
        
    }

    public void Dispose()
    {

    }



}
