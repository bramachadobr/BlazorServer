@page "/Colaborador/colaborador"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable
@inherits OwningComponentBase
@inject IDialogService DialogService


<div class="container">
    <br />
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="Adicionar" OnClick="@NovoColaborador" />
    <br />
    <br />
    <div class="row">
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12">
                <MudTable ServerData="@(new Func<TableState, Task<TableData<Data.Colaborador>>>(ServerReload))"
                        Dense="true" Hover="true" @ref="table">
                    <ToolBarContent>
                    <MudText Typo="Typo.h6">Resultados do periodo</MudText>
                    <MudSpacer />
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="cod" T="Data.Colaborador">Cod.</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="nome" T="Data.Colaborador">Nome</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="cargo" T="Data.Colaborador">Cargo</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="cpf" T="Data.Colaborador">CPF</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="" T="Data.Colaborador">Admissao</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="" T="Data.Colaborador">Demissao</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="" T="Data.Colaborador">Alteracao</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                            <MudTd DataLabel="Cod." HideSmall="true">@context.CodPonto </MudTd>
                            <MudTd DataLabel="Nome">@context.Nome</MudTd>
                            <MudTd DataLabel="Cargo">@context.Cargo.NomeCargo</MudTd>
                            <MudTd DataLabel="CH/Semanal">@context.CpfComMascara</MudTd>
                            <MudTd DataLabel="Total Horas">@context.Contratacao</MudTd>
                            <MudTd DataLabel="CH/Mes">@context.Demissao</MudTd>
                            <MudTd DataLabel="Alteracao">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=> OpenColaborador(context.Id))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.ManageAccounts" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>OpenColaboradorManager(context.Id))" ></MudIconButton>
                            </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                    <MudText>Nenhum registro encontrado</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                    <MudText>Carregando...</MudText>
                    </LoadingContent>
                    <PagerContent>
                    <MudTablePager />
                    </PagerContent>
                    </MudTable>
                    </MudItem>
                </MudGrid>            
    </div>
</div>



@code 
{
    bool _loading;
    private IEnumerable<Data.Colaborador> pagedData;
    private MudTable<Data.Colaborador> table;

    private int totalItems;
    private string searchString = null;

    RadzenDataGrid<Data.Colaborador> grid;

    IEnumerable<Data.Colaborador> _Colaboradores;

    bool isLoading;

    int count;

    public Data.Colaborador ColaboradorObj;

    MudBlazor.DialogService dialogService;

    ColaboradorService _colaboradorService;
    CargoService _cargoService;

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        _colaboradorService = (ColaboradorService)ScopedServices.GetService(typeof(ColaboradorService));
        _cargoService = (CargoService)ScopedServices.GetService(typeof(CargoService));

        await LoadData(ultimoFiltro);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //table.ReloadServerData();
    }

    async void ResetGrid()
    {
        grid.Reset(true);
        await grid.Reload();
        await LoadData(ultimoFiltro);   
    }

    async Task EditarItem()
    {
    }

    
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<TableData<Data.Colaborador>> ServerReload(TableState state)
    {
        IEnumerable<Data.Colaborador> data = await _colaboradorService.GetAllColaboradores();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Cargo.NomeCargo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Cpf.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Nome} {element.Cargo.NomeCargo} {element.Cpf} ".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "cod":
                data = data.OrderByDirection(state.SortDirection, o => o.CodPonto);
                break;
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.Nome);
                break;
            case "cargo":
                data = data.OrderByDirection(state.SortDirection, o => o.Cargo.NomeCargo);
                break;
            case "cpf":
                data = data.OrderByDirection(state.SortDirection, o => o.Cpf);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Data.Colaborador>() {TotalItems = totalItems, Items = pagedData};
    }

    Radzen.LoadDataArgs ultimoFiltro;

    async Task LoadData(Radzen.LoadDataArgs args)
    {
        ultimoFiltro = args;
        isLoading = true;

        var query =  _colaboradorService.GetAllColaboradoresList().AsQueryable();

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Colaboradores = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Colaboradores = query.ToList();
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        else
        {
            _Colaboradores = query.ToList();
        }

        count = _Colaboradores.Count();
        isLoading = false;
    }

    Guid colaboradorId;

    void Open(string title, Type type, Dictionary<string, object> parameters, MudBlazor.DialogOptions options)
    {   
    }

    void Close(dynamic result)
    {   
    }

    void NovoColaborador()
    {
        OpenColaborador(Guid.Empty);
    }


    async void  OpenColaborador(Guid id)
    {
        MudBlazor.DialogOptions DialogOptions = new MudBlazor.DialogOptions()
        {
             //Position = DialogPosition.TopCenter, FullWidth = true
             //FullScreen = true, CloseButton = true, DisableBackdropClick = true, CloseButton = true
             MaxWidth = MaxWidth.Large,
             NoHeader = true
        };

        var dialog = DialogService.Show<Colaborador>("Cadastro do Colaborador", new MudBlazor.DialogParameters ()
            { ["ColaboradorID"]=id }, DialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            ResetGrid();
        }
    }

    async void OpenColaboradorManager(Guid id)
    {
        NavigationManager.NavigateTo($"/gerenciaColaborador/{id.ToString()}");
    }


    RadzenButton buttonFecharDialog;


    public async void OpenColaborador(DataGridRowMouseEventArgs<Data.Colaborador> item)
    {
        MudBlazor.DialogOptions DialogOptions = new MudBlazor.DialogOptions()
        {
             //Position = DialogPosition.TopCenter, FullWidth = true
             //FullScreen = true, CloseButton = true, DisableBackdropClick = true, CloseButton = true
             MaxWidth = MaxWidth.Large,
             NoHeader = true
        };


        Data.Colaborador colab = (Data.Colaborador)item.Data;

        var dialog = DialogService.Show<Colaborador>("Cadastro do Colaborador", new MudBlazor.DialogParameters () 
            { ["ColaboradorID"]=colab.Id, 
              ["colaborador"]=colab }, DialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ResetGrid();
        }

    }

    public void CloseDialog()
    {
        
    }

    public void Dispose()
    {

    }



}
