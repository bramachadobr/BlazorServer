@page "/Ponto/registro2"

@using System
@using BlazorServer.Data
@using System.Globalization
@using System.Timers
@using System.Linq.Dynamic.Core
@using MudBlazor
@using MudBlazor.Components

@inject IJSRuntime JSRuntime
@inherits OwningComponentBase
@inject MudBlazor.DialogService DialogService
@inject IDialogService MudDialogService
@inject Radzen.DialogService DialogServiceRad

<div class="content">
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudTable ServerData="@(new Func<TableState, Task<TableData<Data.RegistroPonto>>>(ServerReload))" Dense="true" Hover="true" @ref="table" FixedHeader="true" Loading="true" Elevation="5" CustomHeader="true">
            <ToolBarContent>
                <MudGrid>
                        <MudItem xs="6" sm="6">
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Procurar" Adornment="Adornment.Start" 
                                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                        </MudItem>
                        <MudItem xs="6" sm="6">
                            <MudDateRangePicker Label="Selecione o periodo de tempo" DateFormat="dd/MM/yyyy" TitleDateFormat="dddd, dd. MMMM" @bind-DateRange="_dateRange" />
                        </MudItem>
                </MudGrid>
            </ToolBarContent>
            <HeaderContent>
                    <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
                        <MudTh colspan="6">Total de Horas do periodo: @TotalHorasPeriodo</MudTh>
                        <MudTh colspan="6">Total registros: @Count</MudTh>
                    </MudTHeadRow>
                    <MudTh><MudTableSortLabel Style="width: 25px;" SortLabel="cod" T="Data.RegistroPonto">Cod.</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 230px;" SortLabel="nome" T="Data.RegistroPonto">Nome completo</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 100px;" SortLabel="cargo" T="Data.RegistroPonto">Dia semana</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 60px;" SortLabel="cpf" T="Data.RegistroPonto">Data</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">AM_ENT</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">AM_SAI</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">PM_ENT</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">PM_SAI</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">NOI_ENT</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">NOI_SAI</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 50px;" SortLabel="" T="Data.RegistroPonto">Total de Horas</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel Style="width: 60px;" SortLabel="" T="Data.RegistroPonto">Editar</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                    <MudTd  DataLabel="Cod." HideSmall="true">@context.Colaborador.CodPonto </MudTd>
                    <MudTd DataLabel="Nome completo">@context.Colaborador.Nome</MudTd>
                    <MudTd DataLabel="Dia semana">@context.DiaSemanaPtBr </MudTd>
                    <MudTd DataLabel="Data">@string.Format("{0:dd/MM/yyyy}", context.Data)</MudTd>
                    <MudTd DataLabel="AM_ENT">@string.Format("{0:HH:mm}", context.AM_ENT)</MudTd>
                    <MudTd DataLabel="AM_SAI">@string.Format("{0:HH:mm}", context.AM_SAI)</MudTd>
                    <MudTd DataLabel="PM_ENT">@string.Format("{0:HH:mm}", context.PM_ENT)</MudTd>
                    <MudTd DataLabel="PM_SAI">@string.Format("{0:HH:mm}", context.PM_SAI)</MudTd>
                    <MudTd DataLabel="NOI_ENT">@string.Format("{0:HH:mm}", context.NOI_ENT)</MudTd>
                    <MudTd DataLabel="NOI_SAI">@string.Format("{0:HH:mm}", context.NOI_SAI)</MudTd>
                    <MudTd DataLabel="Total horas">@context.TotalHorasDia</MudTd>
                    <MudTd DataLabel="Editar">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=> OpenRegistroPonto(context))"></MudIconButton>
                    </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>Nenhum registro encontrado</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Carregando...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</div> 



<MudDialog @bind-IsVisible="@isVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/>@tituloDialog
        </MudText>
    </TitleContent>
    <DialogContent>
        <h6>@mensagemDialog</h6>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FecharDialogModal" Class="px-10">Fechas</MudButton>
    </DialogActions>
</MudDialog>
        


@code
{
    [Inject] private IDialogService DialogServiceMud { get; set; }

    bool _loading;
    private IEnumerable<Data.RegistroPonto> pagedData;
    private MudTable<Data.RegistroPonto> table;

    private int totalItems;
    private string searchString = null;

    MudTabs mudtabs;
    MudTabPanel panel1;
    MudTabPanel panel2;


    public bool isVisible;

    string mensagemDialog;
    string tituloDialog;

    public Data.RegistroPonto regPonto = new RegistroPonto();

    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);

    RadzenDataGrid<Data.RegistroPonto> grid;

    bool isLoading;

    int Count;
    string TotalHorasPeriodo;

    public bool dialogIsOpen = false;

    CultureInfo Cultura = new CultureInfo("pt-BR");

    public string Nome { get; set; }

    public DateTime? Data { get; set; }

    public Guid idSelectd { get; set; }

    public DateTime Data1 { get; set; }

    public DateTime Data2 { get; set; }

    public DateTime DataMais1 { get => Data2.AddHours(23); }

    string RegoligoSelecionado = "Nacional";

    List<Arquivo> listArquivo = new List<Arquivo>();

    List<string> listAlert = new List<string>();

    List<Data.RegistroRelogio> ListRegPonto = new List<RegistroRelogio>();

    List<Data.RegistroRelogio> filtro = new List<RegistroRelogio>();

    //List<Data.RegistroPonto> filtroPontosProcessados;

    IEnumerable<Data.RegistroPonto> filtroPontosProcessados;

    Service.ColaboradorService cs;

    Service.RegistroPontoService rps;

    LoadDataArgs ultimoFiltro;

    string[] value1ItemsCombo = new[]
        {
        "Nacional",
        "Chines",
    };

    //string TotalHorasTrabalhadasNoPeriodo;

    void OpenDialogModal(string titulo, string msg)
    {
        tituloDialog = titulo;
        mensagemDialog = msg;
        isVisible = true;
    } 

    void FecharDialogModal() =>isVisible = false;


    protected override void OnInitialized()
    {
        cs = (Service.ColaboradorService)ScopedServices.GetService(typeof(Service.ColaboradorService));
        rps = (Service.RegistroPontoService)ScopedServices.GetService(typeof(Service.RegistroPontoService));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (table != null)
        {
            table.ReloadServerData();
        }
        table.ReloadServerData();
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    table.ReloadServerData();
    //}

    public static decimal MultiplyPerMinute(TimeSpan a, decimal b)
    {
        return Math.Round(Convert.ToDecimal(a.TotalHours * (double)b), 2, MidpointRounding.AwayFromZero);
    }


    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<TableData<Data.RegistroPonto>> ServerReload(TableState state)
    {
        IEnumerable<Data.RegistroPonto> data = rps.GetAllRegistroPontoList().AsQueryable();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Colaborador.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.DiaSemanaPtBr.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Colaborador.Nome} {element.DiaSemanaPtBr} ".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.Colaborador.Nome);
                break;
            case "semana":
                data = data.OrderByDirection(state.SortDirection, o => o.DiaSemanaPtBr);
                break; 
        }
        pagedData = data.Where(a=>a.Data>=_dateRange.Start && a.Data<=_dateRange.End).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        Count = data.Count();
        long soma = data.Sum(i => i.TotalHorasDia.Ticks);
        TimeSpan time = TimeSpan.FromTicks(soma);
        TotalHorasPeriodo = TotalHorasTrabalhadas(time);
        return new TableData<Data.RegistroPonto>() {TotalItems = totalItems, Items = pagedData};
    }

    private string TotalHorasTrabalhadas(TimeSpan totalHorasPeriodo)
    {
        TimeSpan times = new TimeSpan(0, 0, 0, 0);
        times = totalHorasPeriodo;

        return string.Format("{0}:{1}:{2}", times.Days > 0 ? ((times.Days * 24) + times.Hours) : times.Hours,
                                    times.Minutes < 10 ? ("0" + times.Minutes) : times.Minutes.ToString(),
                                    times.Seconds < 10 ? ("0" + times.Seconds) : times.Seconds.ToString());
    }

    async Task LoadData(LoadDataArgs args)
    {
        ultimoFiltro = args;

        isLoading = true;

        var query = rps.GetAllRegistroPontoList().AsQueryable();

        //filtroPontosProcessados = query.ToList();

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                query = query.Where(args.Filter);
            }
            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                query = query.OrderBy(args.OrderBy);
            }
            //filtroPontosProcessados = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            filtroPontosProcessados = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        }
        else
        {
            filtroPontosProcessados = query.ToList();
        }
        Count = filtroPontosProcessados.Count();
        isLoading = false;
    }


    async Task ProcessaFile(InputFileChangeEventArgs files)
    {

        InvokeAsync(async () =>
        {
            await FilesReady(files);
            DialogServiceRad.Close();
        });
        await BusyDialog();
    }

    async Task FilesReady(InputFileChangeEventArgs e)
    {
        string extensao = string.Empty;

        var entries = e.GetMultipleFiles();
        var file = entries.FirstOrDefault();
        extensao = file.Name.Substring(file.Name.IndexOf("."), file.Name.Length - file.Name.IndexOf("."));

        if (!extensao.Equals(".txt"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Arquivo selecionado não é um arquivo válido!");
            return;
        }
        else
        {
            listAlert.Add($"Nome: {file.Name} - Tamanho: {file.Size}");
        }

        var ms = new MemoryStream();

        await e.File.OpenReadStream().CopyToAsync(ms);

        StreamReader sr = new StreamReader(ms);

        ms.Position = 0;

        List<string> lista = new List<string>();

        string sline = "";

        while (sline != null)
        {
            sline = sr.ReadLine();
            if (sline != "")
            {
                lista.Add(sline);
            }
        }
        //U{5}P{12}D{2}M{2}A{4}H{2}N{2}

        foreach (var item in lista)
        {
            if (item!=null)
            {
                string cod = item.Substring(0, 5);
                string cpf = item.Substring(5, 12);
                string dia = item.Substring(17, 2);
                string mes = item.Substring(19, 2);
                string ano = item.Substring(21, 4);
                string hh = item.Substring(25, 2);
                string mm = item.Substring(27, 2);

                string sData = $"{dia}/{mes}/{ano} {hh}:{mm}";

                RegistroRelogio reg = new RegistroRelogio();

                reg.CodColaborador = Convert.ToInt32(cod);
                reg.Colaborador = await cs.GetColaboradorByIdPonto(Convert.ToInt32(cod));
                reg.Cpf = cpf;
                reg.Data = Convert.ToDateTime(sData, Cultura);
                ListRegPonto.Add(reg);
            }
        }
        await ProcessaPontos();
        mudtabs.ActivatePanel(1);
    }


    async Task ProcessaPontos()
    {

        foreach (var item in ListRegPonto)
        {
            if (item.Colaborador == null)
            {
                bool? result = await DialogServiceMud.ShowMessageBox("Cadastro não encontrado", 
                $"Não foi encontrado o cadastro do colaborador {item.CodColaborador}, identifique e cadastre o colaborador para proseguir. \r\n" + "U{5}P{12}D{2}M{2}A{4}H{2}N{2} - Formato utilizado", yesText: "OK");
                return;
            }
        }


        if (idSelectd != Guid.Empty)
        {
            Data.Colaborador colab = await cs.GetColaboradorById(idSelectd);

            var filtro = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data.ToShortDateString()).ToArray();
            var filtro3 = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data).Select(x => new {Value = x.Count(), Data=(DateTime)x.Key }).ToArray();

            foreach (var item in filtro)
            {
                //await JSRuntime.InvokeVoidAsync("console.log", "teste", item);
                RegistroPonto ponto = new RegistroPonto();
                ponto.Data = Convert.ToDateTime(item.Key);
                ponto.Colaborador = colab;
                //ponto.ColaboradorId = colab.Id;
                foreach (var i in item)
                {
                    ponto.AddHora(i.Data);
                    //await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                }
                if (rps.ValidaPontoExiste(ponto))
                {
                    rps.AddRecord(ponto);
                }
            }
            rps.ContextSaveCharges();
        }
        else
        {
            var filtro = ListRegPonto.GroupBy(i=>i.Data.ToShortDateString()).ToList();

            foreach (var item in filtro)
            {
                var colaboradores = item.GroupBy(i => i.Colaborador).ToList();

                foreach (var colab in colaboradores)
                {
                    //await JSRuntime.InvokeVoidAsync("console.log", "todos", item);
                    RegistroPonto ponto = new RegistroPonto();
                    ponto.Data = Convert.ToDateTime(item.Key);
                    ponto.Colaborador = colab.FirstOrDefault().Colaborador;
                    //ponto.ColaboradorId = colab.FirstOrDefault().Id;
                    foreach (var i in colab)
                    {
                        ponto.AddHora(i.Data);
                        //await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                    }
                    if (!rps.ValidaPontoExiste(ponto))
                    {
                        rps.AddRecord(ponto);
                    }
                }
            }
            rps.ContextSaveCharges();
        }
    }

    public void Print()
    {
        JSRuntime.InvokeVoidAsync("console.log", "Impressão da DivPrint");
        JSRuntime.InvokeVoidAsync("Print");
    }

    void SelectionChangedEvent(object reg)
    {   
        if(reg !=null)
        {
            if (((RegistroPonto)reg).TotalHorasDia.TotalHours < 0)
            {
                regPonto = (RegistroPonto)reg;
                this.StateHasChanged();
                dialogIsOpen = true;
            }
        }
    }

    void SelectionChangedEvent(DataGridRowMouseEventArgs<Data.RegistroPonto> reg)
    {
        if(reg !=null)
        {
            if (((RegistroPonto)reg.Data).TotalHorasDia.TotalHours < 0)
            {
                regPonto = (RegistroPonto)reg.Data;
                this.StateHasChanged();
                dialogIsOpen = true;
            }
        }
    }

    public async void OpenRegistroPonto(DataGridRowMouseEventArgs<Data.RegistroPonto> reg)
    {
        RegistroPonto registro = (RegistroPonto)reg.Data;

        if (registro.TotalHorasDia.Ticks > 0)
        {
            OpenDialogModal("Atenção", "registros positivos não podem ser editados");
        }
        else
        {
            var parameters = new MudBlazor.DialogParameters() { ["registroPontoGuid"] = registro.Id };
            var dialog = MudDialogService.Show<EditaHoraPontoComponent>("Editar Ponto", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                OpenDialogModal("Atualizado", "Registro atualizado!");
            }
        }
    }


    public async void OpenRegistroPonto(RegistroPonto reg)
    {
        RegistroPonto registro = reg;

        if (registro.TotalHorasDia.Ticks > 0)
        {
            OpenDialogModal("Atenção", "registros positivos não podem ser editados");
        }
        else
        {
            var parameters = new MudBlazor.DialogParameters() { ["registroPontoGuid"] = registro.Id };
            var dialog = MudDialogService.Show<EditaHoraPontoComponent>("Editar Ponto", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                OpenDialogModal("Atualizado", "Registro atualizado!");
                await table.ReloadServerData();
            }
        }
    }


    void OnChange(DateTime? value, string name, string format)
    {
        JSRuntime.InvokeAsync<object>("console.log", $"{name} value changed to {value?.ToString(format)}");
    }


    async Task Success()
    {
        await JSRuntime.InvokeAsync<object>("alert", "Successful login!");
    }


    public async void FiltroPontoProcessados()
    {
        filtroPontosProcessados = await rps.GetAllRegistroPontoByIdData(idSelectd, Data1, DataMais1);
    }

    async Task FilesReady2(string files)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "teste", files);
    }


    private void UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
    }


    async Task BusyDialog()
    {
        await DialogServiceRad.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Processando arquivo...
                    </div>
                </div>
            </div>, new Radzen.DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }
}