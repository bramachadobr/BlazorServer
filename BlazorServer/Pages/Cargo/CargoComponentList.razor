@page "/Cargo/cargolist"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@inject Radzen.DialogService DialogService
@inherits OwningComponentBase<Service.CargoService>



<div class="container">
    <br />
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="Adicionar" OnClick="@NovoCargo" />
    <p></p>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<Cargo>>>(ServerReload))"
            Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Resultados do periodo</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nome" T="Cargo">Nome</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="alterar" T="Cargo">Alteracao</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
                <MudTd DataLabel="Nome">@context.NomeCargo</MudTd>
                <MudTd DataLabel="Alterar">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>Editar(context.Id))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>Apagar(context))"></MudIconButton>
                </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Nenhum registro encontrado</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Carregando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    </MudTable>
</div>



@code 
{
    bool _loading;
    private IEnumerable<Cargo> pagedData;
    private MudTable<Cargo> table;
    private int totalItems;
    private string searchString = null;

    [Inject] private MudBlazor.IDialogService DialogServiceMud { get; set; }

    [Parameter] public Data.Cargo CargoObj { get; set; }

    RadzenDataGrid<Data.Cargo> grid;

    IEnumerable<Data.Cargo> _cargos;

    protected override void OnAfterRender(bool firstRender)
    {
        table.ReloadServerData();
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (_cargos is null)
        {
            _cargos = await Service.GetAllRecords();
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

     private async Task<TableData<Cargo>> ServerReload(TableState state)
    {
        IEnumerable<Cargo> data =  await Service.GetAllRecords(); //await httpClient.GetFromJsonAsync<List<TopsDashBoard>>("webapi/periodictable");
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.NomeCargo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.NomeCargo);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Cargo>() {TotalItems = totalItems, Items = pagedData};
    }

    void NovoCargo()
    {
        Editar(Guid.Empty);
    }

    async void Editar(Guid id)
    {
        MudBlazor.DialogOptions opt = new MudBlazor.DialogOptions()
        {
            //MaxWidth = MaxWidth.False,
            //NoHeader = false,
            CloseButton = true
        };

        var dialog = DialogServiceMud.Show<BlazorServer.Pages.Cargo.CargoComponent>("Cadastro de Cargo", new DialogParameters() { ["IdCargo"] = id }, opt);
        var result = await dialog.Result;
        StateHasChanged();
    }

    async void Apagar(Cargo id)
    {
        bool? result = await DialogServiceMud.ShowMessageBox("Atencao", "Deseja realmente apagar esse registro?", yesText: "Sim", cancelText: "Nao");
        if (result == true)
        {
            Service.ExluirRecord(id);
        }
        StateHasChanged();
    }


    void LoadData(LoadDataArgs args)
    {
        var result = Service.GetAllRecordsAsEnumerable();
        _cargos = result.AsODataEnumerable();
    }

    


}