@page "/"

@*@attribute [Authorize]*@

@inherits OwningComponentBase
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime

<div class="container">
    <br />
    <div class="row">
    </div>
    <div class="row">
        <div class="col-sm">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Carga horária total do mês</MudText>
                        <input class="form-control" type="month" id="month" @onchange="@LoadCargaHoraria" value=@valor />
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@string.Format($"CH normal do mês:  {tempoNormal.ToString()}") </MudText>
                    <MudText>@string.Format($"CH dos feriados:   {totalFeriado.ToString()}")</MudText>
                    <MudText Typo="Typo.h6">Total da CH do mês: @Convert.ToString(tempoNormal - totalFeriado)</MudText>
                </MudCardContent>
            </MudCard>
        </div>
        <div class="col-sm">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Top's 5 Colaboradores </MudText>
                    </CardHeaderContent>
@*                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>*@
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@ListaTop5Colaboradores" Hover="true" Breakpoint="Breakpoint.Sm"  Loading="@_loading" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh>Nº</MudTh>
                            <MudTh>Nome</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Nº">@context.Posicao </MudTd>
                            <MudTd DataLabel="Nome">@context.Nome</MudTd>
                            <MudTd DataLabel="Total Horas">@context.TotalHorasFormatada</MudTd>
                        </RowTemplate>
                    </MudTable>
@*                    <MudText>This day everything happend.</MudText>
                    <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>*@
                </MudCardContent>
@*                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                </MudCardActions>*@
            </MudCard>
        </div>

        <div class="col-sm">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">The Story Book</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>This day everything happend.</MudText>
                    <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                </MudCardActions>
            </MudCard>
        </div>
    </div>
    <div class="row"></div>
    <div class="row"></div>
</div>


@code 
{
    public DateTime Data { get; set; }

    public string valor { get=>string.Format($"{DateTime.Now.Year.ToString()}-{DateTime.Now.Month.ToString()}");}

    double tempoNormal;
    double totalFeriado;

    bool _loading;
    List<TopsDashBoard> ListaTop5Colaboradores;
    //Dictionary<int, Data.Colaborador> colaboradoresTop5;

    Service.ColaboradorService _serviceColaborador;
    Service.RegistroPontoService _serviceRegistroPonto;
    Service.ServiceFeriado _serviceFeriado;

    protected override void OnInitialized()
    {
        _serviceColaborador = (ColaboradorService)ScopedServices.GetService(typeof(ColaboradorService));
        _serviceRegistroPonto = (RegistroPontoService)ScopedServices.GetService(typeof(RegistroPontoService));
        _serviceFeriado = (ServiceFeriado)ScopedServices.GetService(typeof(ServiceFeriado));
        LoadDados();
        //data = DateTime.Now.AddDays(-30);
        Data = DateTime.Today;
        LoadCargaHoraria(new ChangeEventArgs() { Value = valor });
    }

    void LoadCargaHoraria(ChangeEventArgs args)
    {
        if (args.Value.ToString().Length < 6)
            return;
        DateTime dd = new DateTime(Convert.ToInt32(args.Value.ToString().Substring(0, 4)), Convert.ToInt32(args.Value.ToString().Substring(5, 2)), 1);
        Data = dd;
        tempoNormal = _serviceFeriado.CargaHorariaDoMes(dd, ref totalFeriado);
        LoadDados();
    }

    void LoadDados()
    {
        _loading = true;

        DateTime data1 = new DateTime();
        DateTime data2 = new DateTime();

        _serviceFeriado.RetornaDatasInicioFim(Data, ref data1, ref data2);

        var quer3 = from ponto in _serviceRegistroPonto.RegistroPontos.ToList()
                    join colab in _serviceColaborador.Colaboradores.ToList() on ponto.Colaborador equals colab
                    where ponto.Data>= data1 && ponto.Data <=data2 
                    orderby colab.Nome
                    group ponto by colab.Nome into re
                    select re;

        Dictionary<string, TimeSpan> Lista = new Dictionary<string, TimeSpan>();

        List<ColabTopMes> listColabTopMes = new List<ColabTopMes>();

        foreach (var item in quer3)
        {
            ColabTopMes c = new ColabTopMes();
            c.Nome = item.Key;
            string nome = "";
            long tempo=0;
            nome = item.Key;
            foreach (var h in item)
            {
                tempo += h.TotalHorasDia.Ticks;
            }
            c.Tempo = new TimeSpan(tempo);
            double x = ((Colaborador)item).CargaHorariaSemanal;
            listColabTopMes.Add(c);
            Lista.Add(nome, new TimeSpan(tempo));
        }

        var listaOrdenada =  Lista.OrderByDescending(a => a.Value).Take(5);

        ListaTop5Colaboradores = new List<TopsDashBoard>();

        int i = 1;
        foreach (var item in listaOrdenada)
        {
            ListaTop5Colaboradores.Add(new TopsDashBoard { Posicao = i, Nome = item.Key, TotalHoras = item.Value });
            i++;
        }
        _loading = false;
    }

    public class ColabTopMes
    {
        public string Nome { get; set; }
        public TimeSpan Tempo { get; set; }
        public TimeSpan ChMes { get; set; }
    }
}























@*
 //----------------------------------------------FIM-------------------------------------------------------------



        var colaborador1 = _serviceColaborador.Colaboradores.Where(a => a.Nome.Contains("Alan")).FirstOrDefault();

        var select = _serviceRegistroPonto.RegistroPontos.Where(r => r.Colaborador == colaborador1).ToList();

        select = select.Where(a => a.Data >= data1 && a.Data <= data2).ToList();

        int count = select.Count();

        var somaHoras = select.Sum(r=>r.TotalHorasDia.Ticks);

        JSRuntime.InvokeVoidAsync("console.log", "Valor", new TimeSpan(somaHoras));

        //var query = from colab in _serviceColaborador.Colaboradores
        //           select new
        //           {
        //               Nome = colab.Nome,
        //               Total = (from h in _serviceRegistroPonto.RegistroPontos.ToList() select h.AM_ENT.Ticks).Sum()
        //           };
        //foreach (var item in query)
        //{
        //    JSRuntime.InvokeVoidAsync("console.log", "item", item);
        //}
        //var query = from colab in _serviceColaborador.Colaboradores
        //select new
        //{
        //    Nome = colab.Nome,
        //    Total = (_serviceRegistroPonto.RegistroPontos.Where(a=>a.Colaborador == colab).Sum(a => a.ValorHora))
        //};

        DateTime d1 = new DateTime();
        DateTime d2 = new DateTime();

        _serviceFeriado.RetornaDatasInicioFim(Data, ref d1, ref d2);

        var query = from colab in _serviceColaborador.Colaboradores.ToList()
        select new
        {
            Nome = colab.Nome,
            Total = _serviceRegistroPonto.RegistroPontos.Where(r => r.Colaborador == colab).Where(a => a.Data >= d1 && a.Data <= data2).Sum(a=>a.ValorHora)
        };

        var query2 = query.OrderByDescending(a => a.Total).Take(5);

        foreach (var item in query2)
        {
            JSRuntime.InvokeVoidAsync("console.log", "item", item);
        }

        //where ponto.Data>=DateTime.Parse("01/01/2021") && ponto.Data<=DateTime.Parse("30/01/2021")
        //select ponto;
        //var qq = _serviceRegistroPonto.RegistroPontos.Where(p => p.Data >= DateTime.Parse("01/01/2021") && p.Data <= DateTime.Parse("30/01/2021"))
        //                                            .GroupBy(c => c.Colaborador);
        //foreach (var item in qq)
        //{
        //    JSRuntime.InvokeVoidAsync("console.log", "item", item);
        //}                        
        //var query = from r in _serviceRegistroPonto.RegistroPontos 
        //            from c in _serviceColaborador.Colaboradores 
        //            group r by r.Colaborador into ponto 
        //            select new
        //            {
        //                Id = ponto.Key,
        //                TotalHoras = new TimeSpan( ponto.Sum(a=>a.TotalHorasDia.Ticks))
        //            };
        //foreach (var item in query)
        //{
        //    JSRuntime.InvokeVoidAsync("console.log", "item", item);
        //}
*@