@page "/Unidade"

@using System.Timers
@using BlazorServer.Service
@using BlazorServer.Data
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using System.Linq.Dynamic.Core
@inject MudBlazor.DialogService DialogService
@implements IDisposable
@inherits OwningComponentBase<UnidadeService>


<div class="container">
    <br />
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" aria-label="Adicionar" OnClick="@NovaUnidade" />
    <br />
    <br />
    <div class="row">
        <MudItem xs="12">
         <MudTable ServerData="@(new Func<TableState, Task<TableData<Unidade>>>(ServerReload))"
                Dense="true" Hover="true" @ref="table">
            <ToolBarContent>
            <MudText Typo="Typo.h6">Resultados do periodo</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="nome" T="Unidade">Nome</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="razao" T="Unidade">Razao Social</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="cnpj" T="Unidade">CNPJ</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="cidade" T="Unidade">Cidade</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                    <MudTd DataLabel="Nome">@context.Nome </MudTd>
                    <MudTd DataLabel="Razao">@context.RazaoSocial</MudTd>
                    <MudTd DataLabel="CNPJ">@context.CNPJ</MudTd>
                    <MudTd DataLabel="Cidade">@context.Cidade</MudTd>
                    <MudTd DataLabel="Alteracao">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=> Editar(context.Id))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.ManageAccounts" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(()=>Editar(context.Id))" ></MudIconButton>
                    </MudTd>
            </RowTemplate>
            <NoRecordsContent>
            <MudText>Nenhum registro encontrado</MudText>
            </NoRecordsContent>
            <LoadingContent>
            <MudText>Carregando...</MudText>
            </LoadingContent>
            <PagerContent>
            <MudTablePager />
            </PagerContent>
            </MudTable>
        </MudItem>
    </div>
</div>


   


@code {

    bool _loading;
    private IEnumerable<Unidade> pagedData;
    private MudTable<Unidade> table;

    private int totalItems;
    private string searchString = null;

    [Inject] private MudBlazor.IDialogService DialogServiceMud { get; set; }

    RadzenDataGrid<Data.Unidade> grid;

    IEnumerable<Data.Unidade> _Unidades;

    bool isLoading;

    int count;

    public Data.Unidade UnidadeObj;

    protected override void OnInitialized()
    {
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<TableData<Unidade>> ServerReload(TableState state)
    {
        IEnumerable<Unidade> data = await Service.GetUnidades();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.RazaoSocial.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.CNPJ} {element.Cidade} ".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.Nome);
                break;
            case "razao":
                data = data.OrderByDirection(state.SortDirection, o => o.RazaoSocial);
                break;
            case "cnpj":
                data = data.OrderByDirection(state.SortDirection, o => o.CNPJ);
                break;
            case "cidade":
                data = data.OrderByDirection(state.SortDirection, o => o.Cidade);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Unidade>() {TotalItems = totalItems, Items = pagedData};
    }

    void NovaUnidade()
    {
        Editar(Guid.Empty);
        ResetGrid();
    }

    async void Apagar(Unidade unidade)
    {
        bool? result = await DialogServiceMud.ShowMessageBox("Atencao!", "Deseja apagar o registro ?", yesText: "Sim", cancelText: "Nao");
        if (result == true)
        {
            Service.DeleteRecor(unidade);
        }
        ResetGrid();
    }

    async void Editar(Guid id)
    {
        MudBlazor.DialogOptions opt = new MudBlazor.DialogOptions()
        {
            //MaxWidth = MaxWidth.False,
            //NoHeader = false,
            CloseButton = true
        };

        var dialog = DialogServiceMud.Show<UnidadeDetails>("Cadastro de Cargo", new DialogParameters() { ["UnidadeId"] = id }, opt);
        var result = await dialog.Result;
        StateHasChanged();
        ResetGrid();

    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var query = Service.GetUnidadesList().AsQueryable();

        _Unidades = query;

        if (args != null)
        {
            if (!string.IsNullOrEmpty(args.Filter))
            {
                // Filter via the Where method
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                // Sort via the OrderBy method
                query = query.OrderBy(args.OrderBy);
            }
            if (args.Skip > 0)
            {
                // Perform paginv via Skip and Take.
                _Unidades = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
            }
            _Unidades = query;
            // Important!!! Make sure the Count property of RadzenDataGrid is set.
            count = query.Count();
        }
        count = _Unidades.Count();
        isLoading = false;
    }


    void OpenUnidades(DataGridRowMouseEventArgs<Data.Unidade> args)
    {
    }

    async void ResetGrid()
    {
        grid.Reset(true);
        grid.Reload();
        await grid.FirstPage(true);
        _Unidades = Service.GetUnidadesList().AsQueryable();
    }

}
