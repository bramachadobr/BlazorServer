@page "/"
@using System
@using System.IO
@using BlazorServer.Data
@using System.Globalization
@using System.Timers
@inject IJSRuntime JSRuntime
@inject IMatDialogService MatDialogService

@inject DialogService DialogService
@implements IDisposable


@*<ComponetAlertMessege Enumtipo=EnumTipoAlerts.info Message="Bem vindo ao novo app G-Ponto (Gerenciamento do Ponto de Colaboradores) v4.0" />*@
<div class="container">
    <div Class="row">
        <MatFileUpload OnChange="@ProcessaFile" AllowMultiple="false" Label="Selecione um único arquivo aqui no navegador"></MatFileUpload>
    </div>
        <p></p>
    <div class="row">
                <div class="col-sm-5">
                    <h3>Selecione o colaborador</h3>
                    <RadzenDropDownDataGrid TValue="Guid" @bind-Value="@idSelectd" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith"
                                        AllowFiltering="true" AllowClear="true" Data="@cs.Colaboradores" TextProperty="Nome" ValueProperty="Id" 
                                        Style="width:100%" />
                </div>
                <div class="col-sm">
                    <h3>Data inicial</h3>
                    <RadzenDatePicker @bind-Value=@Data1 DateFormat="dd/MM/yyyy" Change=@(args => OnChange(args, "DatePicker", "dd/MM/yyyy")) />
                </div>
                <div class="col-sm">
                    <h3>Data final</h3>
                    <RadzenDatePicker @bind-Value=@Data2 DateFormat="dd/MM/yyyy" Change=@(args => OnChange(args, "DatePicker", "dd/MM/yyyy")) />  
                </div>
                <div class="col-sm">
                            <button type="button" class="btn btn-primary btn-lg" @onclick=@FiltroPontoProcessados >Filtrar</button>
                            @*<RadzenButton Style="" Click="@FiltroPontoProcessados">Filtrar</RadzenButton>*@
                    @*<RadzenTextBox @bind-Value=@value MaxLength="5" Change=@(args => OnChange(args, "TextBox with 5 maximum characters")) />*@
                </div>
    </div>
    <div class="row">
                <div class=col-sm>
                    <h3>Total de Horas do período: @TotalHorasPeriodo</h3>
                    @*<RadzenTextBox @bind-Value=@TotalHorasPeriodo/>*@
                </div>
    </div>
    <p></p>
    <div class="row">
                <div class="col-sm-3">
                    <button class="btn btn-primary" @onclick="Print">Imprimir</button>
                </div>
    </div>
    <br/>
    <div class="row">
@*        <div class="col-sm"><MatButton Raised="true" Type="submit" OnClick="@ProcessaPontos" >Processar Horas</MatButton></div>
        </div>*@

        <div class="row">
            <div id="PrintDiv">
                <table class="table table-hover table-bordered table-sm">
                    <thead>
                        <tr>
                            <th scope="col">Cód.</th>
                            <th scope="col">Colaborador</th>
                            <th scope="col">DiaSemana</th>
                            <th scope="col">Data</th>
                            <th scope="col">AM_ENT</th>
                            <th scope="col">AM_SAI</th>
                            <th scope="col">PM_ENT</th>
                            <th scope="col">PM_SAI</th>
                            <th scope="col">NOI_ENT</th>
                            <th scope="col">NOI_SAI</th>
                            <th scope="col">TotalHorasDia</th>
                        </tr>
                    </thead>
                    <tbody>
                            @foreach (var item in filtroPontosProcessados)
                            {
                                <tr class=@Convert.ToString(item.TotalHorasDia < TimeSpan.Zero ? "table-danger":"")>
                                    <td scope="row">@item.Colaborador.CodPonto</td>
                                    <td>@item.Colaborador.Nome</td>
                                    <td>@item.DiaSemanaPtBr</td>
                                    <td>@item.Data.ToShortDateString()</td>
                                    <td>@item.AM_ENT.ToString("HH:mm")</td>
                                    <td>@item.AM_SAI.ToString("HH:mm")</td>
                                    <td>@item.PM_ENT.ToString("HH:mm")</td>
                                    <td>@item.PM_SAI.ToString("HH:mm")</td>
                                    <td>@item.NOI_ENT.ToString("HH:mm")</td>
                                    <td>@item.NOI_SAI.ToString("HH:mm")</td>
                                    <td>@item.TotalHorasDia</td>
                                    <td><RadzenButton Text="Editar" Click=@(args => SelectionChangedEvent(item)) ButtonStyle="ButtonStyle.Secondary"/></td>
                                </tr>
                            }
                    </tbody>
                </table>
            </div>
        </div>
</div>

</div>


     <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Editar Ponto</MatDialogTitle>
            <MatDialogContent>
                <EditForm Model="@regPonto" OnValidSubmit="Success">
                    <p><b>Entrada manhã</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.AM_ENT" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/> @*Change=@(args => OnChange(args, "Time-only DatePicker", "HH:mm"))*@
                    <p><b>Saída manhã</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.AM_SAI" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/>
                    <p><b>Entrada tarde</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.PM_ENT" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/>
                    <p><b>Saída tarde</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.PM_SAI" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/>
                    <p><b>Entrada noite</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.NOI_ENT" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/>
                    <p><b>Saída noite</b></p>
                    <RadzenDatePicker TValue="DateTime" @bind-Value="regPonto.NOI_SAI" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"/>
                    <p><b>Total Horas do Dia</b></p>
                    <a>@regPonto.TotalHorasDia</a>

                </EditForm>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancelar</MatButton>
                <MatButton OnClick="@OkClick">Salvar</MatButton>
            </MatDialogActions>
        </MatDialog>



@code
{
    public async Task Print()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "asdsadasaa");
        await JSRuntime.InvokeVoidAsync("Print");
    }

    public string TotalHorasPeriodo { get; set; }

    //Evento ao clicar na grid 
    void SelectionChangedEvent(object reg)
    {
        if(reg !=null)
        {
            if (((RegistroPonto)reg).TotalHorasDia.TotalHours < 0)
            {
                regPonto = (RegistroPonto)reg;
                this.StateHasChanged();
                dialogIsOpen = true;
            }
        }
    }


    string text = "Hi";
    

   void ButtonClicked()
   {
   }

    void OnChange(DateTime? value, string name, string format)
    {
        JSRuntime.InvokeAsync<object>("console.log", $"{name} value changed to {value?.ToString(format)}");
    }

    //async Task Success() => await JSRuntime.InvokeAsync<object>("alert", "Successful login!");

    async Task Success()
    {
        await JSRuntime.InvokeAsync<object>("alert", "Successful login!");
    }

    public Data.RegistroPonto regPonto = new RegistroPonto();
    public bool dialogIsOpen = false;

    CultureInfo Cultura = new CultureInfo("pt-BR");

    public string Nome { get; set; }
    public DateTime? Data { get; set; }

    public Guid idSelectd { get; set; }

    public DateTime Data1 { get; set; }

    public DateTime Data2 { get; set; }

    public DateTime DataMais1 { get => Data2.AddHours(23); }

    string RegoligoSelecionado = "Nacional";
    string[] value1ItemsCombo = new[]
    {
        "Nacional",
        "Chines",
    };

    List<Arquivo> listArquivo = new List<Arquivo>();

    List<string> listAlert = new List<string>();

    List<Data.RegistroRelogio> ListRegPonto = new List<RegistroRelogio>();

    List<Data.RegistroRelogio> filtro = new List<RegistroRelogio>();

    List<Data.RegistroPonto> filtroPontosProcessados = new List<RegistroPonto>();

    Service.ColaboradorService cs = new Service.ColaboradorService();

    Service.RegistroPontoService rps = new Service.RegistroPontoService();

    void OkClick()
    {
        dialogIsOpen = false;
    }

    void OpenDialog()
    {
        dialogIsOpen = true;
    }

    async Task OpenDialog(Guid Id)
    {
        dialogIsOpen = true;
    }

    async Task OpenDialogFromService()
    {
        await MatDialogService.OpenAsync(typeof(DemoDialogItem), null);
    }

    public void FiltroPonto()
    {
        filtro = ListRegPonto;

        if (idSelectd!=Guid.Empty)
        {
            int codigo = cs.Colaboradores.FirstOrDefault(x => x.Id.Equals(idSelectd)).CodPonto;
            filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo)).ToList();
        }
        if (Data1 != DateTime.MinValue && Data2 != DateTime.MinValue)
        {
            if(idSelectd != Guid.Empty)
            {
                int codigo = cs.Colaboradores.FirstOrDefault(x => x.Id.Equals(idSelectd)).CodPonto;
                filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo) && i.Data >= Data1 && i.Data <= DataMais1).ToList();
            }
            else
                filtro = ListRegPonto.Where<RegistroRelogio>(i => i.Data >= Data1 && i.Data <= DataMais1).ToList();
        }
    }

    public async void FiltroPontoProcessados()
    {
        filtroPontosProcessados = await rps.GetAllRegistroPontoByIdData(idSelectd, Data1, DataMais1);
        TotalHorasDoPeriodo();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        cs.LoadColaboradores();
        rps.colaboradores = cs.Colaboradores;
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;                 
    }

    async void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
          await JSRuntime.InvokeVoidAsync("console.log", "Abertura");
    }

    void Close(dynamic result)
    {
        JSRuntime.InvokeVoidAsync("console.log", "Fechamento");

    }


        
    async Task FilesReady2(string files)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "teste", files);
    }

    public void Dispose()
    {
                //DialogService.OnOpen -= Open;
                //DialogService.OnClose -= Close;                 
    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Loading...
                    </div>
                </div>
        </div>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }


    async Task ProcessaFile(IMatFileUploadEntry[] files)
    {
        InvokeAsync(async () =>
        {
            await FilesReady(files);
            DialogService.Close();
        });

        await BusyDialog();
    }

    async Task FilesReady(IMatFileUploadEntry[] files)
    {
        string extensao = string.Empty;
        var file = files.FirstOrDefault();
        extensao = file.Name.Substring(file.Name.IndexOf("."), file.Name.Length - file.Name.IndexOf("."));

        if (!extensao.Equals(".txt"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Arquivo selecionado não é um arquivo válido!");
            return;
        }
        else
        {
            listAlert.Add($"Nome: {file.Name} - Tamanho: {file.Size}");
        }

        var ms = new MemoryStream();

        await file.WriteToStreamAsync(ms);

        StreamReader sr = new StreamReader(ms);

        List<string> linhas = new List<string>();

        ms.Position = 0;

        string linha = "";
        
        while (!(linha is null))
        {
            linha = sr.ReadLine();
            if (linha != null)
            {
                linhas.Add(linha);
            }
        }

        List<string> lista = new List<string>();

        ms.Position = 0;

        string sline = "";

        while (sline != null)
        {
            sline = sr.ReadLine();
            if (sline != "")
            {
                lista.Add(sline);
            }
        }

        //U{5}P{12}D{2}M{2}A{4}H{2}N{2}

        foreach (var item in lista)
        {
            if (item!=null)
            {
                string cod = item.Substring(0, 5);
                string cpf = item.Substring(5, 12);
                string dia = item.Substring(17, 2);
                string mes = item.Substring(19, 2);
                string ano = item.Substring(21, 4);
                string hh = item.Substring(25, 2);
                string mm = item.Substring(27, 2);

                string sData = $"{dia}/{mes}/{ano} {hh}:{mm}";

                RegistroRelogio reg = new RegistroRelogio();

                reg.CodColaborador = Convert.ToInt32(cod);
                reg.Colaborador = await cs.GetColaboradorByIdPonto(Convert.ToInt32(cod));
                reg.Cpf = cpf;
                reg.Data = Convert.ToDateTime(sData, Cultura);
                ListRegPonto.Add(reg);
            }
        }
        FiltroPonto();
        await ProcessaPontos();
        filtroPontosProcessados = await rps.GetAllGeristroPonto();
        TotalHorasDoPeriodo();
    }

    void TotalHorasDoPeriodo()
    {
        long xx = filtroPontosProcessados.Sum<RegistroPonto>(i => i.TotalHorasDia.Ticks);
        TimeSpan time = TimeSpan.FromTicks(xx);
        TotalHorasPeriodo = time.TotalHours.ToString();
    }

    public override bool Equals(object obj)
    {
        return obj is Index index &&
               RegoligoSelecionado == index.RegoligoSelecionado;
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(RegoligoSelecionado);
    }

    async Task ProcessaPontos()
    {

        if (idSelectd != Guid.Empty)
        {
            Data.Colaborador colab = await cs.GetColaboradorById(idSelectd);

            var filtro = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data.ToShortDateString()).ToArray();
            var filtro3 = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data).Select(x => new {Value = x.Count(), Data=(DateTime)x.Key }).ToArray();

            foreach (var item in filtro)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "teste", item);
                RegistroPonto ponto = new RegistroPonto();
                ponto.Data = Convert.ToDateTime(item.Key);
                ponto.Colaborador = colab;
                ponto.ColaboradorId = colab.Id;
                foreach (var i in item)
                {
                    ponto.AddHora(i.Data);
                    await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                }
                if(rps.ValidaPontoExiste(ponto) == false)
                    rps.AddRecord(ponto);
            }
        }
        else
        {
            var filtro = ListRegPonto.GroupBy(i=>i.Data.ToShortDateString()).ToList();

            foreach (var item in filtro)
            {
                var colaboradores = item.GroupBy(i => i.Colaborador).ToList();

                foreach (var colab in colaboradores)
                {
                    await JSRuntime.InvokeVoidAsync("console.log", "todos", item);
                    RegistroPonto ponto = new RegistroPonto();
                    ponto.Data = Convert.ToDateTime(item.Key);
                    ponto.Colaborador = colab.FirstOrDefault().Colaborador;
                    ponto.ColaboradorId = colab.FirstOrDefault().Id;
                    foreach (var i in colab)
                    {
                        ponto.AddHora(i.Data);
                        await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                    }
                    rps.AddRecord(ponto);
                }
            }
        }
    }

}