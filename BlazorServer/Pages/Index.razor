@page "/"
@using System
@using System.IO
@using BlazorServer.Data
@using System.Globalization
@inject IJSRuntime JSRuntime

<ComponetAlertMessege Enumtipo=EnumTipoAlerts.info Message="Bem vindo ao novo app G-Ponto (Gerenciamento do Ponto de Colaboradores) v4.0" />
<MatTabGroup>

    <MatTab Label="1-Carregar Arquivo">
        <p></p>
        <p>
            <MatSelectItem @bind-Value="@RegoligoSelecionado" Items="@value1ItemsCombo" Outlined="true" Label="Selecione o modelo do Relogio"></MatSelectItem>
        </p>
        <p>
            <MatFileUpload OnChange="@FilesReady" AllowMultiple="false" Label="Selecione um único arquivo aqui no navegador"></MatFileUpload>
        </p>
        <p></p>

    </MatTab>

    <MatTab Label="2-Filtrar Colaborador">
        <p></p>
        <div class="content">
            <div class="row">

                <div class="col-sm">
                    <MatSelectValue @bind-Value="@idSelectd" Items="@cs.Colaboradores" Outlined="true" ValueSelector="@(i=>i.Id)" Label="Selecione Colaborador">
                                <ItemTemplate>
                                        <span>@context.Nome</span>
                                </ItemTemplate>
                    </MatSelectValue>
                </div>
                <div class="col-sm">
                    <MatDatePicker @bind-Value="@Data1" Format="dd-MM-yy" Label="Data Inicio" Class="w-100" Outlined="true"></MatDatePicker>
                    @*<p>@Data1</p>*@
                </div>
                <div class="col-sm">
                    <MatDatePicker @bind-Value="@Data2" Format="dd-MM-yy" Label="Data Final" Class="w-100" Outlined="true" ></MatDatePicker>
                    @*<p>@Data2</p>*@
                </div>
                <div class="col-lg btn">
                    <MatButton Raised="true" Type="submit" OnClick="@FiltroPonto">Filtrar</MatButton>
                </div>
            </div>
        </div>
    </MatTab>

    <MatTab Label="3-Processar">
        <p></p>
        <div class="row">
            <div class="col-sm"><MatButton Raised="true" Type="submit" OnClick="@ProcessaPontos" >Processar Horas</MatButton></div>
            <div class="col-sm align-content-center"><div class="h6">Registros do colaborador no périodo selecionado</div></div>
        </div>
        <div class="row">
                <MatTable Items="@rps.registroPontos" class="mat-elevation-z5" Striped="true" RequestApiOnlyOnce="true" AllowSelection="true" PageSize=25 >
                    <MatTableHeader>
                        @*<th>Cod</th>*@
                        <th>Colaborador</th>
                        <th>DiaSemana</th>
                        <th>Data</th>
                        <th>AM_ENT</th>
                        <th>AM_SAI</th>
                        <th>PM_ENT</th>
                        <th>PM_SAI</th>
                        <th>NOI_ENT</th>
                        <th>NOI_SAI</th>
                        <th>TotalHorasDia</th>
                    </MatTableHeader>
                    <MatTableRow>
                        @*<td>@context.Id</td>*@
                        <td>@context.Colaborador.Nome</td>
                        <td>@context.DiaSemanaPtBr</td>
                        <td>@context.Data.ToShortDateString()</td>
                        <td>@context.AM_ENT</td>
                        <td>@context.AM_SAI</td>
                        <td>@context.PM_ENT</td>
                        <td>@context.PM_SAI</td>
                        <td>@context.NOI_ENT</td>
                        <td>@context.NOI_SAI</td>
                        <td>@context.TotalHorasDia</td>
                    </MatTableRow>
                </MatTable>
        </div>
    </MatTab>

    <MatTab Label="4-Gerar aquivo de ponto">
        Second Content
    </MatTab>
    <MatTab Label="5-Impressão">
        Second Content
    </MatTab>
    <MatTab>
        <LabelContent>
            Third <MatIcon Icon="@MatIconNames.Close"></MatIcon>
        </LabelContent>
        <ChildContent>
            Third Content
        </ChildContent>
    </MatTab>

</MatTabGroup>

<div class="row">
            <p>
            @if (ListRegPonto.Count >0)
            {
                <MatTable Items="@filtro" class="mat-elevation-z5" Striped="true" RequestApiOnlyOnce="true" AllowSelection="true" PageSize=25 >
                    <MatTableHeader>
                        <th>Cod</th>
                        <th class=col-sm>Nome</th>
                        <th class=col-sm>CPF</th>
                        <th class=col-sm>Data</th>
                        <th class=col-sm>Hora</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.CodColaborador</td>
                        <td>@context.Colaborador.Nome</td>
                        <td>@string.Format("{0:0000.000.000-00}", @context.Cpf)</td>
                        <td>@context.Data.ToShortDateString()</td>
                        <td>@context.Hora.ToString()</td>
                    </MatTableRow>
                </MatTable>
            }
        </p>
</div>




@*@if (rps.registroPontos.Count>0)
{
     <table class="table">
        <thead>
            <tr>
                <th>Cod</th>
                <th>Colaborador</th>
                <th>DiaSemana</th>
                <th>Data</th>
                <th>AM_ENT</th>
                <th>AM_SAI</th>
                <th>PM_ENT</th>
                <th>PM_SAI</th>
                <th>NOI_ENT</th>
                <th>NOI_SAI</th>
                <th>TotalHorasDia</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in rps.registroPontos)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Colaborador.Nome</td>
                    <td>@item.DiaSemanaPtBr</td>
                    <td>@Cultura.DateTimeFormat.GetDayName(item.DiaSemana)</td>
                    <td>@item.Data.ToShortDateString()</td>
                    <td>@item.AM_ENT</td>
                    <td>@item.AM_SAI</td>
                    <td>@item.PM_ENT</td>
                    <td>@item.PM_SAI</td>
                    <td>@item.NOI_ENT</td>
                    <td>@item.NOI_SAI</td>
                    <td>@item.TotalHorasDia</td>
                </tr>
            }
        </tbody>
    </table>
}*@


@code
{
    CultureInfo Cultura = new CultureInfo("pt-BR");
    public string Nome { get; set; }
    public DateTime? Data { get; set; }

    public Guid idSelectd { get; set; }
    public DateTime Data1 { get; set; }
    public DateTime Data2 { get; set; }

    #region Carregar Arquivo

    string RegoligoSelecionado = "Nacional";
    string[] value1ItemsCombo = new[]
    {
        "Nacional",
        "Chines",
    };

    List<Arquivo> listArquivo = new List<Arquivo>();

    List<string> listAlert = new List<string>();

    List<Data.RegistroRelogio> ListRegPonto = new List<RegistroRelogio>();

    List<Data.RegistroRelogio> filtro = new List<RegistroRelogio>();

    Service.ColaboradorService cs = new Service.ColaboradorService();

    Service.RegistroPontoService rps = new Service.RegistroPontoService();

    public void FiltroPonto()
    {
        

        filtro = ListRegPonto;

        if (idSelectd!=Guid.Empty)
        {
            int codigo = cs.Colaboradores.FirstOrDefault(x => x.Id.Equals(idSelectd)).CodPonto;
            filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo)).ToList();
        }
        if (Data1 != DateTime.MinValue && Data2 != DateTime.MinValue)
        {
            int codigo = cs.Colaboradores.FirstOrDefault(x => x.Id.Equals(idSelectd)).CodPonto;
            filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo) && i.Data >= Data1 && i.Data <= Data2).ToList();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        cs.LoadColaboradores();
        rps.colaboradores = cs.Colaboradores;
    }


    async Task FilesReady(IMatFileUploadEntry[] files)
    {
        string extensao = string.Empty;
        var file = files.FirstOrDefault();
        extensao = file.Name.Substring(file.Name.IndexOf("."), file.Name.Length - file.Name.IndexOf("."));

        if (!extensao.Equals(".txt"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Arquivo selecionado não é um arquivo válido!");
            return;
            // bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
            //string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Take some input:"); // Prompt
        }
        else
        {
            listAlert.Add($"Nome: {file.Name} - Tamanho: {file.Size}");
        }

        var ms = new MemoryStream();

        await file.WriteToStreamAsync(ms);

        StreamReader sr = new StreamReader(ms);

        List<string> linhas = new List<string>();

        ms.Position = 0;

        string linha = "";
        
        while (!(linha is null))
        {
            linha = sr.ReadLine();
            if (linha != null)
            {
                linhas.Add(linha);
            }
        }



        //string lin = sr.ReadToEnd();
        //string Arquivo = Encoding.ASCII.GetString(ms.ToArray());

        List<string> lista = new List<string>();

        ms.Position = 0;

        string sline = "";

        while (sline != null)
        {
            sline = sr.ReadLine();
            if (sline != "")
            {
                lista.Add(sline);
            }
        }

        //U{5}P{12}D{2}M{2}A{4}H{2}N{2}

        foreach (var item in lista)
        {
            if (item!=null)
            {
                string cod = item.Substring(0, 5);
                string cpf = item.Substring(5, 12);
                string dia = item.Substring(17, 2);
                string mes = item.Substring(19, 2);
                string ano = item.Substring(21, 4);
                string hh = item.Substring(25, 2);
                string mm = item.Substring(27, 2);

                RegistroRelogio reg = new RegistroRelogio();

                reg.CodColaborador = Convert.ToInt32(cod);
                reg.Colaborador = await cs.GetColaboradorByIdPonto(Convert.ToInt32(cod));
                reg.Cpf = cpf;
                reg.Data = Convert.ToDateTime($"{dia}/{mes}/{ano}");
                reg.Hora = new TimeSpan(Convert.ToInt32(hh), Convert.ToInt32(mm), 0);
                ListRegPonto.Add(reg);
            }

        }
        FiltroPonto();
    }

    async Task ProcessaPontos()
    {
        Data1 = Data1.AddHours(-3);
        Data2 = Data2.AddHours(-3);

        Data.Colaborador colab = await cs.GetColaboradorById(idSelectd);

        var filtro = ListRegPonto.Where(x=>x.Colaborador.Id.Equals(colab.Id) && x.Data>=Data1 && x.Data<=Data2).GroupBy(i => i.Data).ToList();

        foreach (var item in filtro)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "teste", item);
            RegistroPonto ponto = new RegistroPonto();
            ponto.Data = item.Key;
            ponto.Colaborador = colab;
            ponto.ColaboradorId = colab.Id;
            foreach (var i in item)
            {
                ponto.AddHora(i.Hora);
                await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
            }
            rps.AddRecord(ponto);
        }

    }


    #endregion

}