@page "/"
@using System
@using System.IO
@using BlazorServer.Data
@inject IJSRuntime JSRuntime

<ComponetAlertMessege Enumtipo=EnumTipoAlerts.info Message="Bem vindo ao novo app G-Ponto (Gerenciamento do Ponto de Colaboradores) v4.0" />
<MatTabGroup>

    <MatTab Label="1-Carregar Arquivo">
        <p></p>
        <p>
            <MatSelectItem @bind-Value="@RegoligoSelecionado" Items="@value1ItemsCombo" Outlined="true" Label="Selecione o modelo do Relogio"></MatSelectItem>
        </p>
        <p>
            <MatFileUpload OnChange="@FilesReady" AllowMultiple="false" Label="Selecione um único arquivo aqui no navegador"></MatFileUpload>
        </p>

    </MatTab>

    <MatTab Label="2-Filtrar Colaborador">
        <p></p>
        <div class="container">
            <div class="row">
                <div class="col-sm btn-lg">
                    <MatButton Raised="true" Type="submit" Class="align-bottom">Carregar Cadastros</MatButton>
                </div>
                <div class="col-lg">
                    <MatSelectValue @bind-Value="@idSelectd" Items="@cs.Colaboradores" Outlined="true" ValueSelector="@(i=>i.Id)" Label="Selecione Colaborador">
                                <ItemTemplate>
                                        <span>@context.Nome</span>
                                </ItemTemplate>
                    </MatSelectValue>
                    <p>@idSelectd</p>
                </div>
                <div class="col-sm">
                    <MatDatePicker @bind-Value="@Data1" Format="dd-MM-yy" Label="Data Inicio" Class="w-100" Outlined="true"></MatDatePicker>
                    <p>@Data1</p>
                </div>
                <div class="col-sm">
                    <MatDatePicker @bind-Value="@Data2" Format="dd-MM-yy" Label="Data Final" Class="w-100" Outlined="true"></MatDatePicker>
                    <p>@Data2</p>
                </div>
                <div class="col-lg btn">
                    <MatButton Raised="true" Type="submit">Filtrar</MatButton>
                </div>
            </div>
        </div>
    </MatTab>

    <MatTab Label="3-Processar">
        <p></p>
        <div class="row">
            <div class="col-sm"><MatButton Raised="true" Type="submit" OnClick="@ProcessaPontos" >Processar Horas</MatButton></div>
            <div class="col-sm align-content-center"><div class="h6">Registros do colaborador no périodo selecionado</div></div>
        </div>
    </MatTab>

    <MatTab Label="4-Gerar aquivo de ponto">
        Second Content
    </MatTab>
    <MatTab Label="5-Impressão">
        Second Content
    </MatTab>
    <MatTab>
        <LabelContent>
            Third <MatIcon Icon="@MatIconNames.Close"></MatIcon>
        </LabelContent>
        <ChildContent>
            Third Content
        </ChildContent>
    </MatTab>

</MatTabGroup>

@if (ListRegPonto.Count >0)
{
        <table class="table">
        <thead>
            <tr>
                <th>Cod</th>
                <th>Nome</th>
                <th>CPF</th>
                <th>Data</th>
                <th>Hora</th>
            </tr>
        </thead>
        <tbody>
            @if (idSelectd!=Guid.Empty)
            { 
                int codigo = cs.Colaboradores.FirstOrDefault(x => x.Id.Equals(idSelectd)).CodPonto;

                var filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo)).ToList();
                if (Data1 != DateTime.MinValue && Data2 != DateTime.MinValue)
                {
                    filtro = ListRegPonto.Where<RegistroRelogio>(i => i.CodColaborador.Equals(codigo) && i.Data >= Data1 && i.Data <= Data2).ToList();
                }

                foreach (var item in filtro)
                {       
                    <tr>
                    <td>@item.CodColaborador</td>
                    <td>@item.Colaborador.Nome</td>
                    <td>@item.Cpf</td>
                    <td>@item.Data.ToShortDateString()</td>
                    <td>@item.Hora</td>
                    </tr>
                }
            }
            else
            {
                foreach (var item in ListRegPonto)
                {
                    <tr>
                        <td>@item.CodColaborador</td>
                        <td>@item.Colaborador.Nome</td>
                        <td>@item.Cpf</td>
                        <td>@item.Data.ToShortDateString()</td>
                        <td>@item.Hora</td>
                    </tr>
                }
            }

        </tbody>
    </table>
}



@code
{
    public string Nome { get; set; }
    public DateTime? Data { get; set; }

    public Guid idSelectd { get; set; }
    public DateTime Data1 { get; set; }
    public DateTime Data2 { get; set; }

    #region Carregar Arquivo

    string RegoligoSelecionado = "Nacional";
    string[] value1ItemsCombo = new[]
    {
        "Nacional",
        "Chines",
    };

    List<Arquivo> listArquivo = new List<Arquivo>();

    List<string> listAlert = new List<string>();

    List<Data.RegistroRelogio> ListRegPonto = new List<RegistroRelogio>();

    Service.ColaboradorService cs = new Service.ColaboradorService();

    Service.RegistroPontoService rp = new Service.RegistroPontoService();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cs.LoadColaboradores();
    }


    async Task FilesReady(IMatFileUploadEntry[] files)
    {
        string extensao = string.Empty;
        var file = files.FirstOrDefault();
        extensao = file.Name.Substring(file.Name.IndexOf("."), file.Name.Length - file.Name.IndexOf("."));

        if (!extensao.Equals(".txt"))
        {
            return;
        }
        else
        {
            listAlert.Add($"Nome: {file.Name} - Tamanho: {file.Size}");
        }

        var ms = new MemoryStream();

        await file.WriteToStreamAsync(ms);

        StreamReader sr = new StreamReader(ms);

        List<string> linhas = new List<string>();

        ms.Position = 0;

        string linha = "";
        
        while (!(linha is null))
        {
            linha = sr.ReadLine();
            if (linha != null)
            {
                linhas.Add(linha);
            }
        }



        //string lin = sr.ReadToEnd();
        //string Arquivo = Encoding.ASCII.GetString(ms.ToArray());

        List<string> lista = new List<string>();

        ms.Position = 0;

        string sline = "";

        while (sline != null)
        {
            sline = sr.ReadLine();
            if (sline != "")
            {
                lista.Add(sline);
            }
        }

        //U{5}P{12}D{2}M{2}A{4}H{2}N{2}

        foreach (var item in lista)
        {
            if (item!=null)
            {
                string cod = item.Substring(0, 5);
                string cpf = item.Substring(5, 17);
                string dia = item.Substring(17, 2);
                string mes = item.Substring(19, 2);
                string ano = item.Substring(21, 4);
                string hh = item.Substring(25, 2);
                string mm = item.Substring(27, 2);

                RegistroRelogio reg = new RegistroRelogio();

                reg.CodColaborador = Convert.ToInt32(cod);
                reg.Colaborador = await cs.GetColaboradorByIdPonto(Convert.ToInt32(cod));
                reg.Cpf = cpf;
                reg.Data = Convert.ToDateTime($"{dia}/{mes}/{ano}");
                reg.Hora = new TimeSpan(Convert.ToInt32(hh), Convert.ToInt32(mm), 0);
                ListRegPonto.Add(reg);
            }

        }
    }

    async Task ProcessaPontos()
    {
        //Stopwatch sw = new Stopwatch();
        // sw.Start();

        var filtro = ListRegPonto.Where(x=>x.CodColaborador.Equals(idSelectd) && x.Data>=Data1 && x.Data<=Data2).GroupBy(i => i.Data).ToList();

        foreach (var item in filtro)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "teste", item);
            RegistroPonto ponto = new RegistroPonto();
            ponto.Data = Convert.ToDateTime(item.Key);
            ponto.Colaborador = cs.Colaboradores.FirstOrDefault(i => i.CargoId.Equals(idSelectd));
            ponto.ColaboradorId = ponto.Colaborador.Id;
            foreach (var i in item)
            {
                ponto.AddHora(i.Hora);
                await JSRuntime.InvokeVoidAsync("console.log", "teste", i);

            } 

        }

        
        //criar uma lista de datas agrupadas
        //pegar todos os registros da data atual
        //converter e add cada registro a RegistroPonto usando o ServiceAdd da class
        //Exibir o resultado final
    }


    #endregion

}