@page "/"
@using System
@using System.IO
@using BlazorServer.Data
@using System.Globalization
@using System.Timers
@using System.Linq.Dynamic.Core
@using MudBlazor
@using MudBlazor.Components

@inject IJSRuntime JSRuntime

@inject MudBlazor.DialogService DialogService
@inject Radzen.DialogService DialogServiceRad

@implements IDisposable

@inherits OwningComponentBase

<div class="container">
    <div Class="row">
             <InputFile id="fileInput112" OnChange="ProcessaFile" hidden multiple accept=".txt"/>
                <MudButton HtmlTag="label" 
                           Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Filled.CloudUpload" 
                           for="fileInput112">
                           Upload do arquivo
                </MudButton>
    </div>
    

    <div class="PrintDiv2">
            <div class="row">
                <div class="col-sm">
                    <button class="btn btn-primary" @onclick="Print">Imprimir</button>
                </div>
                <div class="col-sm">@TotalHorasPeriodo</div>
            </div>
            <div class="row" >
                <RadzenDataGrid Data="filtroPontosProcessados" LoadData="@(args2 => LoadData(args2))" TItem="Data.RegistroPonto" RowDoubleClick="@(args=> SelectionChangedEvent(args))"  FilterMode="FilterMode.Advanced" 
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowSorting="true" AllowFiltering="true"> 
                    <Columns>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="Colaborador.CodPonto" Title="Cod" Frozen="true" Width="30px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="Colaborador.Nome" Title="Nome Completo" Width="120px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="DiaSemanaPtBr" Title="Dia semana" Width="60px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="Data" Title="Data" Width="60px" FormatString="{0:dd/MM/yyyy}"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="AM_ENT" Title="AM_ENT" FormatString="{0:HH:mm}"   Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="AM_SAI" Title="AM_SAI" FormatString="{0:HH:mm}"   Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="PM_ENT" Title="PM_ENT" FormatString="{0:HH:mm}"   Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="PM_SAI" Title="PM_SAI" FormatString="{0:HH:mm}"   Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="NOI_ENT" Title="NOI_ENT" FormatString="{0:HH:mm}"  Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="NOI_SAI" Title="NOI_SAI" FormatString="{0:HH:mm}"  Width="45px"/>
                        <RadzenDataGridColumn TItem="Data.RegistroPonto" Property="TotalHorasDia" Title="Total Horas Dia"  Width="45px"/> 
                    </Columns>
                </RadzenDataGrid>
            </div>
    </div>
</div>


@code
{
    public Data.RegistroPonto regPonto = new RegistroPonto();

    public bool dialogIsOpen = false;

    CultureInfo Cultura = new CultureInfo("pt-BR");

    public string Nome { get; set; }

    public DateTime? Data { get; set; }

    public Guid idSelectd { get; set; }

    public DateTime Data1 { get; set; }

    public DateTime Data2 { get; set; }

    public DateTime DataMais1 { get => Data2.AddHours(23); }

    string RegoligoSelecionado = "Nacional";

    List<Arquivo> listArquivo = new List<Arquivo>();

    List<string> listAlert = new List<string>();

    List<Data.RegistroRelogio> ListRegPonto = new List<RegistroRelogio>();

    List<Data.RegistroRelogio> filtro = new List<RegistroRelogio>();

    //List<Data.RegistroPonto> filtroPontosProcessados;

    IEnumerable<Data.RegistroPonto> filtroPontosProcessados;

    Service.ColaboradorService cs;

    Service.RegistroPontoService rps;

    string[] value1ItemsCombo = new[]
    {
        "Nacional",
        "Chines",
    };

    TimeSpan TotalHorasTrabalhadasNoPeriodo;

    public string TotalHorasPeriodo { get; set; }

    async void LoadData(LoadDataArgs args)
    {

        var query = await rps.GetAllGeristroPonto.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }
        filtroPontosProcessados = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    }
    

    public async Task Print()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "asdsadasaa");
        await JSRuntime.InvokeVoidAsync("Print");
    }


    //Evento ao clicar na grid 
    void SelectionChangedEvent(object reg)
    {   
        if(reg !=null)
        {
            if (((RegistroPonto)reg).TotalHorasDia.TotalHours < 0)
            {
                regPonto = (RegistroPonto)reg;
                this.StateHasChanged();
                dialogIsOpen = true;
            }
        }
    }

    void SelectionChangedEvent(DataGridRowMouseEventArgs<Data.RegistroPonto> reg)
    {
        if(reg !=null)
        {
            if (((RegistroPonto)reg.Data).TotalHorasDia.TotalHours < 0)
            {
                regPonto = (RegistroPonto)reg.Data;
                this.StateHasChanged();
                dialogIsOpen = true;
            }
        }
    }


    void OnChange(DateTime? value, string name, string format)
    {
        JSRuntime.InvokeAsync<object>("console.log", $"{name} value changed to {value?.ToString(format)}");
    }

    //async Task Success() => await JSRuntime.InvokeAsync<object>("alert", "Successful login!");

    async Task Success()
    {
        await JSRuntime.InvokeAsync<object>("alert", "Successful login!");
    }
       

    public async void FiltroPontoProcessados()
    {
        filtroPontosProcessados = await rps.GetAllRegistroPontoByIdData(idSelectd, Data1, DataMais1);
        TotalHorasDoPeriodo();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        cs = (Service.ColaboradorService)ScopedServices.GetService(typeof(Service.ColaboradorService));
        rps = (Service.RegistroPontoService)ScopedServices.GetService(typeof(Service.RegistroPontoService));
    }

    
    async Task FilesReady2(string files)
    {
        await JSRuntime.InvokeVoidAsync("console.log", "teste", files);
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        var entries = e.GetMultipleFiles();
    }

    async Task BusyDialog()
    {
        await DialogServiceRad.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Loading...
                    </div>
                </div>
        </div>
    , new Radzen.DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }



    async Task ProcessaFile(InputFileChangeEventArgs files)
    {

        InvokeAsync(async () =>
        {
            await FilesReady(files);
            DialogServiceRad.Close();
        });
        await BusyDialog();
    }

    async Task FilesReady(InputFileChangeEventArgs e)
    {
        string extensao = string.Empty;

        var entries = e.GetMultipleFiles();
        var file = entries.FirstOrDefault();
        extensao = file.Name.Substring(file.Name.IndexOf("."), file.Name.Length - file.Name.IndexOf("."));

        if (!extensao.Equals(".txt"))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Arquivo selecionado não é um arquivo válido!");
            return;
        }
        else
        {
            listAlert.Add($"Nome: {file.Name} - Tamanho: {file.Size}");
        }

        var ms = new MemoryStream();

        await e.File.OpenReadStream().CopyToAsync(ms);

        StreamReader sr = new StreamReader(ms);

        ms.Position = 0;

        List<string> lista = new List<string>();

        string sline = "";

        while (sline != null)
        {
            sline = sr.ReadLine();
            if (sline != "")
            {
                lista.Add(sline);
            }
        }

        //U{5}P{12}D{2}M{2}A{4}H{2}N{2}

        foreach (var item in lista)
        {
            if (item!=null)
            {
                string cod = item.Substring(0, 5);
                string cpf = item.Substring(5, 12);
                string dia = item.Substring(17, 2);
                string mes = item.Substring(19, 2);
                string ano = item.Substring(21, 4);
                string hh = item.Substring(25, 2);
                string mm = item.Substring(27, 2);

                string sData = $"{dia}/{mes}/{ano} {hh}:{mm}";

                RegistroRelogio reg = new RegistroRelogio();

                reg.CodColaborador = Convert.ToInt32(cod);
                reg.Colaborador = await cs.GetColaboradorByIdPonto(Convert.ToInt32(cod));
                reg.Cpf = cpf;
                reg.Data = Convert.ToDateTime(sData, Cultura);
                ListRegPonto.Add(reg);
            }
        }
        await ProcessaPontos();
        //filtroPontosProcessados = await rps.GetAllGeristroPonto();
        var query = await rps.GetAllGeristroPonto();
        filtroPontosProcessados = query.ToList().AsQueryable();
        TotalHorasDoPeriodo();
    }

    void TotalHorasDoPeriodo()
    {
        long xx = filtroPontosProcessados.Sum<RegistroPonto>(i => i.TotalHorasDia.Ticks);
        TimeSpan time = TimeSpan.FromTicks(xx);
        TotalHorasPeriodo = time.TotalHours.ToString();
    }

    public override bool Equals(object obj)
    {
        return obj is Index index &&
               RegoligoSelecionado == index.RegoligoSelecionado;
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(RegoligoSelecionado);
    }

    async Task ProcessaPontos()
    {

        if (idSelectd != Guid.Empty)
        {
            Data.Colaborador colab = await cs.GetColaboradorById(idSelectd);

            var filtro = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data.ToShortDateString()).ToArray();
            var filtro3 = ListRegPonto.Where(x => x.Colaborador.Id.Equals(colab.Id) && x.Data >= Data1 && x.Data <= DataMais1).GroupBy(i => i.Data).Select(x => new {Value = x.Count(), Data=(DateTime)x.Key }).ToArray();

            foreach (var item in filtro)
            {
                await JSRuntime.InvokeVoidAsync("console.log", "teste", item);
                RegistroPonto ponto = new RegistroPonto();
                ponto.Data = Convert.ToDateTime(item.Key);
                ponto.Colaborador = colab;
                ponto.ColaboradorId = colab.Id;
                foreach (var i in item)
                {
                    ponto.AddHora(i.Data);
                    await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                }
                if(rps.ValidaPontoExiste(ponto) == false)
                    rps.AddRecord(ponto);
            }
        }
        else
        {
            var filtro = ListRegPonto.GroupBy(i=>i.Data.ToShortDateString()).ToList();

            foreach (var item in filtro)
            {
                var colaboradores = item.GroupBy(i => i.Colaborador).ToList();

                foreach (var colab in colaboradores)
                {
                    await JSRuntime.InvokeVoidAsync("console.log", "todos", item);
                    RegistroPonto ponto = new RegistroPonto();
                    ponto.Data = Convert.ToDateTime(item.Key);
                    ponto.Colaborador = colab.FirstOrDefault().Colaborador;
                    ponto.ColaboradorId = colab.FirstOrDefault().Id;
                    foreach (var i in colab)
                    {
                        ponto.AddHora(i.Data);
                        await JSRuntime.InvokeVoidAsync("console.log", "teste", i);
                    }
                    rps.AddRecord(ponto);
                }
            }
        }
    }

}